// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq, Clone, Default)]
pub struct Error {
    // message fields
    pub code: i32,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Error {
    fn default() -> &'a Error {
        <Error as ::protobuf::Message>::default_instance()
    }
}

impl Error {
    pub fn new() -> Error {
        ::std::default::Default::default()
    }

    // int32 code = 1;

    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string message = 2;

    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Error {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.message,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size +=
                ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Error {
        Error::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "code", |m: &Error| &m.code, |m: &mut Error| &mut m.code
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "message",
                    |m: &Error| &m.message,
                    |m: &mut Error| &mut m.message,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Error>(
                    "Error",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Error {
        static mut instance: ::protobuf::lazy::Lazy<Error> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(Error::new) }
    }
}

impl ::protobuf::Clear for Error {
    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Error {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct Table {
    // message fields
    pub name: ::std::string::String,
    pub segment_resolution: Table_Resolution,
    pub segment_size: u64,
    pub fields: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Table {
    fn default() -> &'a Table {
        <Table as ::protobuf::Message>::default_instance()
    }
}

impl Table {
    pub fn new() -> Table {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .protos.Table.Resolution segment_resolution = 2;

    pub fn get_segment_resolution(&self) -> Table_Resolution {
        self.segment_resolution
    }
    pub fn clear_segment_resolution(&mut self) {
        self.segment_resolution = Table_Resolution::DAY;
    }

    // Param is passed by value, moved
    pub fn set_segment_resolution(&mut self, v: Table_Resolution) {
        self.segment_resolution = v;
    }

    // uint64 segment_size = 3;

    pub fn get_segment_size(&self) -> u64 {
        self.segment_size
    }
    pub fn clear_segment_size(&mut self) {
        self.segment_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_segment_size(&mut self, v: u64) {
        self.segment_size = v;
    }

    // repeated string fields = 4;

    pub fn get_fields(&self) -> &[::std::string::String] {
        &self.fields
    }
    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fields(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.fields
    }

    // Take field
    pub fn take_fields(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.fields, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Table {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.name,
                    )?;
                }
                2 => ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(
                    wire_type,
                    is,
                    &mut self.segment_resolution,
                    2,
                    &mut self.unknown_fields,
                )?,
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_uint64()?;
                    self.segment_size = tmp;
                }
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.fields)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.segment_resolution != Table_Resolution::DAY {
            my_size += ::protobuf::rt::enum_size(2, self.segment_resolution);
        }
        if self.segment_size != 0 {
            my_size += ::protobuf::rt::value_size(
                3,
                self.segment_size,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        for value in &self.fields {
            my_size += ::protobuf::rt::string_size(4, &value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.segment_resolution != Table_Resolution::DAY {
            os.write_enum(2, self.segment_resolution.value())?;
        }
        if self.segment_size != 0 {
            os.write_uint64(3, self.segment_size)?;
        }
        for v in &self.fields {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Table {
        Table::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "name", |m: &Table| &m.name, |m: &mut Table| &mut m.name
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeEnum<Table_Resolution>,
                >(
                    "segment_resolution",
                    |m: &Table| &m.segment_resolution,
                    |m: &mut Table| &mut m.segment_resolution,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeUint64,
                >(
                    "segment_size",
                    |m: &Table| &m.segment_size,
                    |m: &mut Table| &mut m.segment_size,
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeString,
                    >(
                        "fields",
                        |m: &Table| &m.fields,
                        |m: &mut Table| &mut m.fields,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Table>(
                    "Table",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Table {
        static mut instance: ::protobuf::lazy::Lazy<Table> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(Table::new) }
    }
}

impl ::protobuf::Clear for Table {
    fn clear(&mut self) {
        self.name.clear();
        self.segment_resolution = Table_Resolution::DAY;
        self.segment_size = 0;
        self.fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Table {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Table {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum Table_Resolution {
    DAY = 0,
}

impl ::protobuf::ProtobufEnum for Table_Resolution {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Table_Resolution> {
        match value {
            0 => ::std::option::Option::Some(Table_Resolution::DAY),
            _ => ::std::option::Option::None,
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Table_Resolution] = &[Table_Resolution::DAY];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<Table_Resolution>(
                    "Table.Resolution",
                    file_descriptor_proto(),
                )
            })
        }
    }
}

impl ::std::marker::Copy for Table_Resolution {}

impl ::std::default::Default for Table_Resolution {
    fn default() -> Self {
        Table_Resolution::DAY
    }
}

impl ::protobuf::reflect::ProtobufValue for Table_Resolution {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct Row {
    // message fields
    pub timestamp: u64,
    pub data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Row {
    fn default() -> &'a Row {
        <Row as ::protobuf::Message>::default_instance()
    }
}

impl Row {
    pub fn new() -> Row {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // string data = 2;

    pub fn get_data(&self) -> &str {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Row {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.data,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(
                1,
                self.timestamp,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        if !self.data.is_empty() {
            os.write_string(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Row {
        Row::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeUint64,
                >(
                    "timestamp",
                    |m: &Row| &m.timestamp,
                    |m: &mut Row| &mut m.timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "data", |m: &Row| &m.data, |m: &mut Row| &mut m.data
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Row>(
                    "Row",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Row {
        static mut instance: ::protobuf::lazy::Lazy<Row> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(Row::new) }
    }
}

impl ::protobuf::Clear for Row {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Row {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Row {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct SegmentId {
    // message fields
    pub table: ::std::string::String,
    pub resolution: SegmentResolution,
    pub timestamp: ::std::string::String,
    pub partition_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SegmentId {
    fn default() -> &'a SegmentId {
        <SegmentId as ::protobuf::Message>::default_instance()
    }
}

impl SegmentId {
    pub fn new() -> SegmentId {
        ::std::default::Default::default()
    }

    // string table = 1;

    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // .protos.SegmentResolution resolution = 2;

    pub fn get_resolution(&self) -> SegmentResolution {
        self.resolution
    }
    pub fn clear_resolution(&mut self) {
        self.resolution = SegmentResolution::DAY;
    }

    // Param is passed by value, moved
    pub fn set_resolution(&mut self, v: SegmentResolution) {
        self.resolution = v;
    }

    // string timestamp = 3;

    pub fn get_timestamp(&self) -> &str {
        &self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::string::String) {
        self.timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::string::String {
        &mut self.timestamp
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.timestamp, ::std::string::String::new())
    }

    // string partition_id = 4;

    pub fn get_partition_id(&self) -> &str {
        &self.partition_id
    }
    pub fn clear_partition_id(&mut self) {
        self.partition_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_partition_id(&mut self, v: ::std::string::String) {
        self.partition_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition_id(&mut self) -> &mut ::std::string::String {
        &mut self.partition_id
    }

    // Take field
    pub fn take_partition_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.partition_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SegmentId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.table,
                    )?;
                }
                2 => ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(
                    wire_type,
                    is,
                    &mut self.resolution,
                    2,
                    &mut self.unknown_fields,
                )?,
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.timestamp,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.partition_id,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table);
        }
        if self.resolution != SegmentResolution::DAY {
            my_size += ::protobuf::rt::enum_size(2, self.resolution);
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.timestamp);
        }
        if !self.partition_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.partition_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.table.is_empty() {
            os.write_string(1, &self.table)?;
        }
        if self.resolution != SegmentResolution::DAY {
            os.write_enum(2, self.resolution.value())?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(3, &self.timestamp)?;
        }
        if !self.partition_id.is_empty() {
            os.write_string(4, &self.partition_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SegmentId {
        SegmentId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "table",
                    |m: &SegmentId| &m.table,
                    |m: &mut SegmentId| &mut m.table,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeEnum<SegmentResolution>,
                >(
                    "resolution",
                    |m: &SegmentId| &m.resolution,
                    |m: &mut SegmentId| &mut m.resolution,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "timestamp",
                    |m: &SegmentId| &m.timestamp,
                    |m: &mut SegmentId| &mut m.timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "partition_id",
                    |m: &SegmentId| &m.partition_id,
                    |m: &mut SegmentId| &mut m.partition_id,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<SegmentId>(
                    "SegmentId",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static SegmentId {
        static mut instance: ::protobuf::lazy::Lazy<SegmentId> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(SegmentId::new) }
    }
}

impl ::protobuf::Clear for SegmentId {
    fn clear(&mut self) {
        self.table.clear();
        self.resolution = SegmentResolution::DAY;
        self.timestamp.clear();
        self.partition_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SegmentId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SegmentId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct Segment {
    // message fields
    pub meta: ::protobuf::SingularPtrField<SegmentId>,
    pub rows: ::protobuf::RepeatedField<Row>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Segment {
    fn default() -> &'a Segment {
        <Segment as ::protobuf::Message>::default_instance()
    }
}

impl Segment {
    pub fn new() -> Segment {
        ::std::default::Default::default()
    }

    // .protos.SegmentId meta = 1;

    pub fn get_meta(&self) -> &SegmentId {
        self.meta
            .as_ref()
            .unwrap_or_else(|| SegmentId::default_instance())
    }
    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    pub fn has_meta(&self) -> bool {
        self.meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: SegmentId) {
        self.meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_meta(&mut self) -> &mut SegmentId {
        if self.meta.is_none() {
            self.meta.set_default();
        }
        self.meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_meta(&mut self) -> SegmentId {
        self.meta.take().unwrap_or_else(|| SegmentId::new())
    }

    // repeated .protos.Row rows = 2;

    pub fn get_rows(&self) -> &[Row] {
        &self.rows
    }
    pub fn clear_rows(&mut self) {
        self.rows.clear();
    }

    // Param is passed by value, moved
    pub fn set_rows(&mut self, v: ::protobuf::RepeatedField<Row>) {
        self.rows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rows(&mut self) -> &mut ::protobuf::RepeatedField<Row> {
        &mut self.rows
    }

    // Take field
    pub fn take_rows(&mut self) -> ::protobuf::RepeatedField<Row> {
        ::std::mem::replace(&mut self.rows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Segment {
    fn is_initialized(&self) -> bool {
        for v in &self.meta {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.rows {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.meta)?;
                }
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rows)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.rows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.meta.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.rows {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Segment {
        Segment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<SegmentId>,
                    >(
                        "meta", |m: &Segment| &m.meta, |m: &mut Segment| &mut m.meta
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<Row>,
                    >(
                        "rows", |m: &Segment| &m.rows, |m: &mut Segment| &mut m.rows
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Segment>(
                    "Segment",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Segment {
        static mut instance: ::protobuf::lazy::Lazy<Segment> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(Segment::new) }
    }
}

impl ::protobuf::Clear for Segment {
    fn clear(&mut self) {
        self.meta.clear();
        self.rows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Segment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Segment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum SegmentResolution {
    DAY = 0,
}

impl ::protobuf::ProtobufEnum for SegmentResolution {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SegmentResolution> {
        match value {
            0 => ::std::option::Option::Some(SegmentResolution::DAY),
            _ => ::std::option::Option::None,
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SegmentResolution] = &[SegmentResolution::DAY];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<SegmentResolution>(
                    "SegmentResolution",
                    file_descriptor_proto(),
                )
            })
        }
    }
}

impl ::std::marker::Copy for SegmentResolution {}

impl ::std::default::Default for SegmentResolution {
    fn default() -> Self {
        SegmentResolution::DAY
    }
}

impl ::protobuf::reflect::ProtobufValue for SegmentResolution {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccommon.proto\x12\x06protos\"5\n\x05Error\x12\x12\n\x04code\x18\x01\
    \x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07messa\
    ge\"\xb6\x01\n\x05Table\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12G\n\x12segment_resolution\x18\x02\x20\x01(\x0e2\x18.protos.Table.Res\
    olutionR\x11segmentResolution\x12!\n\x0csegment_size\x18\x03\x20\x01(\
    \x04R\x0bsegmentSize\x12\x16\n\x06fields\x18\x04\x20\x03(\tR\x06fields\"\
    \x15\n\nResolution\x12\x07\n\x03DAY\x10\0\"7\n\x03Row\x12\x1c\n\ttimesta\
    mp\x18\x01\x20\x01(\x04R\ttimestamp\x12\x12\n\x04data\x18\x02\x20\x01(\t\
    R\x04data\"\x9d\x01\n\tSegmentId\x12\x14\n\x05table\x18\x01\x20\x01(\tR\
    \x05table\x129\n\nresolution\x18\x02\x20\x01(\x0e2\x19.protos.SegmentRes\
    olutionR\nresolution\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\tR\ttimestamp\
    \x12!\n\x0cpartition_id\x18\x04\x20\x01(\tR\x0bpartitionId\"Q\n\x07Segme\
    nt\x12%\n\x04meta\x18\x01\x20\x01(\x0b2\x11.protos.SegmentIdR\x04meta\
    \x12\x1f\n\x04rows\x18\x02\x20\x03(\x0b2\x0b.protos.RowR\x04rows*\x1c\n\
    \x11SegmentResolution\x12\x07\n\x03DAY\x10\0J\xf2\t\n\x06\x12\x04\x01\0(\
    \x01\n\x08\n\x01\x0c\x12\x03\x01\0\x12\n\x08\n\x01\x02\x12\x03\x03\x08\
    \x0e\n\n\n\x02\x04\0\x12\x04\x05\0\x08\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x05\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\x06\x04\x13\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x06\x04\x05\x0f\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x06\x04\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\n\x0e\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x06\x11\x12\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x07\
    \x04\x17\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x07\x04\x06\x13\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\x07\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x07\x0b\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x07\x15\x16\n\n\n\
    \x02\x04\x01\x12\x04\n\0\x12\x01\n\n\n\x03\x04\x01\x01\x12\x03\n\x08\r\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x0b\x02\x12\n\r\n\x05\x04\x01\x02\0\x04\
    \x12\x04\x0b\x02\n\x0f\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0b\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0b\t\r\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x0b\x10\x11\n\x0c\n\x04\x04\x01\x04\0\x12\x04\x0c\x02\x0e\
    \x03\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03\x0c\x07\x11\n\r\n\x06\x04\x01\
    \x04\0\x02\0\x12\x03\r\x04\x0c\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\
    \x03\r\x04\x07\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03\r\n\x0b\n\x0b\
    \n\x04\x04\x01\x02\x01\x12\x03\x0f\x02$\n\r\n\x05\x04\x01\x02\x01\x04\
    \x12\x04\x0f\x02\x0e\x03\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x0f\x02\
    \x0c\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0f\r\x1f\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x0f\"#\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x10\
    \x02\x1a\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x10\x02\x0f$\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x10\t\x15\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x10\x18\x19\n\
    \x0b\n\x04\x04\x01\x02\x03\x12\x03\x11\x02\x1d\n\x0c\n\x05\x04\x01\x02\
    \x03\x04\x12\x03\x11\x02\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x11\
    \x0b\x11\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x11\x12\x18\n\x0c\n\x05\
    \x04\x01\x02\x03\x03\x12\x03\x11\x1b\x1c\n\n\n\x02\x04\x02\x12\x04\x14\0\
    \x17\x01\n\n\n\x03\x04\x02\x01\x12\x03\x14\x08\x0b\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03\x15\x02\x17\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x15\x02\
    \x14\r\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x15\t\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\
    \x15\x15\x16\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x16\x02\x12\n\r\n\x05\
    \x04\x02\x02\x01\x04\x12\x04\x16\x02\x15\x17\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x16\t\r\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x16\x10\x11\n\n\n\x02\x05\0\x12\
    \x04\x1a\0\x1c\x01\n\n\n\x03\x05\0\x01\x12\x03\x1a\x05\x16\n\x0b\n\x04\
    \x05\0\x02\0\x12\x03\x1b\x02\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x1b\
    \x02\x05\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x1b\x08\t\n\n\n\x02\x04\x03\
    \x12\x04\x1e\0#\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1e\x08\x11\n\x0b\n\
    \x04\x04\x03\x02\0\x12\x03\x1f\x02\x13\n\r\n\x05\x04\x03\x02\0\x04\x12\
    \x04\x1f\x02\x1e\x13\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1f\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1f\t\x0e\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03\x1f\x11\x12\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x20\x02#\n\
    \r\n\x05\x04\x03\x02\x01\x04\x12\x04\x20\x02\x1f\x13\n\x0c\n\x05\x04\x03\
    \x02\x01\x06\x12\x03\x20\x02\x13\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\
    \x20\x14\x1e\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x20!\"\n\x0b\n\x04\
    \x04\x03\x02\x02\x12\x03!\x02\x17\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04!\
    \x02\x20#\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03!\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\x02\x01\x12\x03!\t\x12\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\
    \x03!\x15\x16\n\x0b\n\x04\x04\x03\x02\x03\x12\x03\"\x02\x1a\n\r\n\x05\
    \x04\x03\x02\x03\x04\x12\x04\"\x02!\x17\n\x0c\n\x05\x04\x03\x02\x03\x05\
    \x12\x03\"\x02\x08\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03\"\t\x15\n\x0c\
    \n\x05\x04\x03\x02\x03\x03\x12\x03\"\x18\x19\n\n\n\x02\x04\x04\x12\x04%\
    \0(\x01\n\n\n\x03\x04\x04\x01\x12\x03%\x08\x0f\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03&\x02\x15\n\r\n\x05\x04\x04\x02\0\x04\x12\x04&\x02%\x11\n\x0c\n\
    \x05\x04\x04\x02\0\x06\x12\x03&\x02\x0b\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03&\x0c\x10\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03&\x13\x14\n\x0b\n\
    \x04\x04\x04\x02\x01\x12\x03'\x02\x18\n\x0c\n\x05\x04\x04\x02\x01\x04\
    \x12\x03'\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03'\x0b\x0e\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03'\x0f\x13\n\x0c\n\x05\x04\x04\x02\x01\
    \x03\x12\x03'\x16\x17b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
