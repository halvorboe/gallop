// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `indexer.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct QueryRequest {
    // message fields
    pub table: ::std::string::String,
    pub query: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRequest {
    fn default() -> &'a QueryRequest {
        <QueryRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryRequest {
    pub fn new() -> QueryRequest {
        ::std::default::Default::default()
    }

    // string table = 1;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // string query = 2;


    pub fn get_query(&self) -> &str {
        &self.query
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: ::std::string::String) {
        self.query = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut ::std::string::String {
        &mut self.query
    }

    // Take field
    pub fn take_query(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table);
        }
        if !self.query.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.query);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table.is_empty() {
            os.write_string(1, &self.table)?;
        }
        if !self.query.is_empty() {
            os.write_string(2, &self.query)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRequest {
        QueryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "table",
                    |m: &QueryRequest| { &m.table },
                    |m: &mut QueryRequest| { &mut m.table },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "query",
                    |m: &QueryRequest| { &m.query },
                    |m: &mut QueryRequest| { &mut m.query },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRequest>(
                    "QueryRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static QueryRequest {
        static mut instance: ::protobuf::lazy::Lazy<QueryRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(QueryRequest::new)
        }
    }
}

impl ::protobuf::Clear for QueryRequest {
    fn clear(&mut self) {
        self.table.clear();
        self.query.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryResponse {
    // message fields
    pub rows: ::protobuf::RepeatedField<super::common::Row>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryResponse {
    fn default() -> &'a QueryResponse {
        <QueryResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryResponse {
    pub fn new() -> QueryResponse {
        ::std::default::Default::default()
    }

    // repeated .protos.Row rows = 1;


    pub fn get_rows(&self) -> &[super::common::Row] {
        &self.rows
    }
    pub fn clear_rows(&mut self) {
        self.rows.clear();
    }

    // Param is passed by value, moved
    pub fn set_rows(&mut self, v: ::protobuf::RepeatedField<super::common::Row>) {
        self.rows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rows(&mut self) -> &mut ::protobuf::RepeatedField<super::common::Row> {
        &mut self.rows
    }

    // Take field
    pub fn take_rows(&mut self) -> ::protobuf::RepeatedField<super::common::Row> {
        ::std::mem::replace(&mut self.rows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QueryResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.rows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rows {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryResponse {
        QueryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Row>>(
                    "rows",
                    |m: &QueryResponse| { &m.rows },
                    |m: &mut QueryResponse| { &mut m.rows },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryResponse>(
                    "QueryResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static QueryResponse {
        static mut instance: ::protobuf::lazy::Lazy<QueryResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(QueryResponse::new)
        }
    }
}

impl ::protobuf::Clear for QueryResponse {
    fn clear(&mut self) {
        self.rows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CountRequest {
    // message fields
    pub table: ::std::string::String,
    pub query: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CountRequest {
    fn default() -> &'a CountRequest {
        <CountRequest as ::protobuf::Message>::default_instance()
    }
}

impl CountRequest {
    pub fn new() -> CountRequest {
        ::std::default::Default::default()
    }

    // string table = 1;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // string query = 2;


    pub fn get_query(&self) -> &str {
        &self.query
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: ::std::string::String) {
        self.query = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut ::std::string::String {
        &mut self.query
    }

    // Take field
    pub fn take_query(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CountRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table);
        }
        if !self.query.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.query);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table.is_empty() {
            os.write_string(1, &self.table)?;
        }
        if !self.query.is_empty() {
            os.write_string(2, &self.query)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CountRequest {
        CountRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "table",
                    |m: &CountRequest| { &m.table },
                    |m: &mut CountRequest| { &mut m.table },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "query",
                    |m: &CountRequest| { &m.query },
                    |m: &mut CountRequest| { &mut m.query },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CountRequest>(
                    "CountRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CountRequest {
        static mut instance: ::protobuf::lazy::Lazy<CountRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CountRequest::new)
        }
    }
}

impl ::protobuf::Clear for CountRequest {
    fn clear(&mut self) {
        self.table.clear();
        self.query.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CountRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CountRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CountResponse {
    // message fields
    pub result: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CountResponse {
    fn default() -> &'a CountResponse {
        <CountResponse as ::protobuf::Message>::default_instance()
    }
}

impl CountResponse {
    pub fn new() -> CountResponse {
        ::std::default::Default::default()
    }

    // int32 result = 1;


    pub fn get_result(&self) -> i32 {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = 0;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: i32) {
        self.result = v;
    }
}

impl ::protobuf::Message for CountResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.result = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != 0 {
            my_size += ::protobuf::rt::value_size(1, self.result, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != 0 {
            os.write_int32(1, self.result)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CountResponse {
        CountResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "result",
                    |m: &CountResponse| { &m.result },
                    |m: &mut CountResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CountResponse>(
                    "CountResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CountResponse {
        static mut instance: ::protobuf::lazy::Lazy<CountResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CountResponse::new)
        }
    }
}

impl ::protobuf::Clear for CountResponse {
    fn clear(&mut self) {
        self.result = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CountResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BindRequest {
    // message fields
    pub segment_id: ::protobuf::SingularPtrField<super::common::SegmentId>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BindRequest {
    fn default() -> &'a BindRequest {
        <BindRequest as ::protobuf::Message>::default_instance()
    }
}

impl BindRequest {
    pub fn new() -> BindRequest {
        ::std::default::Default::default()
    }

    // .protos.SegmentId segment_id = 1;


    pub fn get_segment_id(&self) -> &super::common::SegmentId {
        self.segment_id.as_ref().unwrap_or_else(|| super::common::SegmentId::default_instance())
    }
    pub fn clear_segment_id(&mut self) {
        self.segment_id.clear();
    }

    pub fn has_segment_id(&self) -> bool {
        self.segment_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_segment_id(&mut self, v: super::common::SegmentId) {
        self.segment_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_segment_id(&mut self) -> &mut super::common::SegmentId {
        if self.segment_id.is_none() {
            self.segment_id.set_default();
        }
        self.segment_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_segment_id(&mut self) -> super::common::SegmentId {
        self.segment_id.take().unwrap_or_else(|| super::common::SegmentId::new())
    }
}

impl ::protobuf::Message for BindRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.segment_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.segment_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.segment_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.segment_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BindRequest {
        BindRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::SegmentId>>(
                    "segment_id",
                    |m: &BindRequest| { &m.segment_id },
                    |m: &mut BindRequest| { &mut m.segment_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<BindRequest>(
                    "BindRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BindRequest {
        static mut instance: ::protobuf::lazy::Lazy<BindRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(BindRequest::new)
        }
    }
}

impl ::protobuf::Clear for BindRequest {
    fn clear(&mut self) {
        self.segment_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BindRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BindRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UnBindRequest {
    // message fields
    pub segment_id: ::protobuf::SingularPtrField<super::common::SegmentId>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnBindRequest {
    fn default() -> &'a UnBindRequest {
        <UnBindRequest as ::protobuf::Message>::default_instance()
    }
}

impl UnBindRequest {
    pub fn new() -> UnBindRequest {
        ::std::default::Default::default()
    }

    // .protos.SegmentId segment_id = 1;


    pub fn get_segment_id(&self) -> &super::common::SegmentId {
        self.segment_id.as_ref().unwrap_or_else(|| super::common::SegmentId::default_instance())
    }
    pub fn clear_segment_id(&mut self) {
        self.segment_id.clear();
    }

    pub fn has_segment_id(&self) -> bool {
        self.segment_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_segment_id(&mut self, v: super::common::SegmentId) {
        self.segment_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_segment_id(&mut self) -> &mut super::common::SegmentId {
        if self.segment_id.is_none() {
            self.segment_id.set_default();
        }
        self.segment_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_segment_id(&mut self) -> super::common::SegmentId {
        self.segment_id.take().unwrap_or_else(|| super::common::SegmentId::new())
    }
}

impl ::protobuf::Message for UnBindRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.segment_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.segment_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.segment_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.segment_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnBindRequest {
        UnBindRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::SegmentId>>(
                    "segment_id",
                    |m: &UnBindRequest| { &m.segment_id },
                    |m: &mut UnBindRequest| { &mut m.segment_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnBindRequest>(
                    "UnBindRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UnBindRequest {
        static mut instance: ::protobuf::lazy::Lazy<UnBindRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(UnBindRequest::new)
        }
    }
}

impl ::protobuf::Clear for UnBindRequest {
    fn clear(&mut self) {
        self.segment_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnBindRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnBindRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rindexer.proto\x12\x06protos\x1a\x0ccommon.proto\":\n\x0cQueryRequest\
    \x12\x14\n\x05table\x18\x01\x20\x01(\tR\x05table\x12\x14\n\x05query\x18\
    \x02\x20\x01(\tR\x05query\"0\n\rQueryResponse\x12\x1f\n\x04rows\x18\x01\
    \x20\x03(\x0b2\x0b.protos.RowR\x04rows\":\n\x0cCountRequest\x12\x14\n\
    \x05table\x18\x01\x20\x01(\tR\x05table\x12\x14\n\x05query\x18\x02\x20\
    \x01(\tR\x05query\"'\n\rCountResponse\x12\x16\n\x06result\x18\x01\x20\
    \x01(\x05R\x06result\"?\n\x0bBindRequest\x120\n\nsegment_id\x18\x01\x20\
    \x01(\x0b2\x11.protos.SegmentIdR\tsegmentId\"A\n\rUnBindRequest\x120\n\n\
    segment_id\x18\x01\x20\x01(\x0b2\x11.protos.SegmentIdR\tsegmentId2\xd9\
    \x01\n\x07Indexer\x126\n\x05Count\x12\x14.protos.CountRequest\x1a\x15.pr\
    otos.CountResponse\"\0\x126\n\x05Query\x12\x14.protos.QueryRequest\x1a\
    \x15.protos.QueryResponse\"\0\x12,\n\x04Bind\x12\x13.protos.BindRequest\
    \x1a\r.protos.Error\"\0\x120\n\x06UnBind\x12\x15.protos.UnBindRequest\
    \x1a\r.protos.Error\"\0J\xff\x07\n\x06\x12\x04\0\0*\x03\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0e\n\t\n\x02\x03\0\x12\
    \x03\x04\x07\x15\n\n\n\x02\x04\0\x12\x04\x06\0\t\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x06\x08\x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x04\x15\n\r\n\
    \x05\x04\0\x02\0\x04\x12\x04\x07\x04\x06\x16\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x07\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x0b\x10\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x07\x13\x14\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x08\x04\x15\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x08\x04\x07\x15\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\x08\x0b\x10\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\x13\
    \x14\n\n\n\x02\x04\x01\x12\x04\x0b\0\r\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \x0b\x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0c\x04\x1a\n\x0c\n\x05\
    \x04\x01\x02\0\x04\x12\x03\x0c\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03\x0c\r\x10\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0c\x11\x15\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x0c\x18\x19\n\n\n\x02\x04\x02\x12\x04\x10\
    \0\x13\x01\n\n\n\x03\x04\x02\x01\x12\x03\x10\x08\x14\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03\x11\x04\x15\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x11\x04\
    \x10\x16\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x11\x0b\x10\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\
    \x11\x13\x14\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x12\x04\x15\n\r\n\x05\
    \x04\x02\x02\x01\x04\x12\x04\x12\x04\x11\x15\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x03\x12\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x12\x0b\
    \x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x12\x13\x14\n\n\n\x02\x04\
    \x03\x12\x04\x15\0\x17\x01\n\n\n\x03\x04\x03\x01\x12\x03\x15\x08\x15\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03\x16\x04\x15\n\r\n\x05\x04\x03\x02\0\x04\
    \x12\x04\x16\x04\x15\x17\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x16\x04\t\
    \n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x16\n\x10\n\x0c\n\x05\x04\x03\x02\
    \0\x03\x12\x03\x16\x13\x14\n\n\n\x02\x04\x04\x12\x04\x19\0\x1d\x01\n\n\n\
    \x03\x04\x04\x01\x12\x03\x19\x08\x13\n0\n\x04\x04\x04\x02\0\x12\x03\x1a\
    \x04\x1d\"#\x20string\x20host\x20=\x202;\n\x20int32\x20port\x20=\x203;\n\
    \n\r\n\x05\x04\x04\x02\0\x04\x12\x04\x1a\x04\x19\x15\n\x0c\n\x05\x04\x04\
    \x02\0\x06\x12\x03\x1a\x04\r\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1a\
    \x0e\x18\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1a\x1b\x1c\n\n\n\x02\x04\
    \x05\x12\x04\x20\0\"\x01\n\n\n\x03\x04\x05\x01\x12\x03\x20\x08\x15\n\x0b\
    \n\x04\x04\x05\x02\0\x12\x03!\x04\x1d\n\r\n\x05\x04\x05\x02\0\x04\x12\
    \x04!\x04\x20\x17\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03!\x04\r\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x03!\x0e\x18\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03!\x1b\x1c\n\n\n\x02\x06\0\x12\x04%\0*\x03\n\n\n\x03\x06\0\x01\
    \x12\x03%\x08\x0f\n\x0b\n\x04\x06\0\x02\0\x12\x03&\x046\n\x0c\n\x05\x06\
    \0\x02\0\x01\x12\x03&\x08\r\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03&\x0e\x1a\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x03&%2\n\x0b\n\x04\x06\0\x02\x01\x12\
    \x03'\x046\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03'\x08\r\n\x0c\n\x05\x06\
    \0\x02\x01\x02\x12\x03'\x0e\x1a\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03'%2\
    \n\x0b\n\x04\x06\0\x02\x02\x12\x03(\x04,\n\x0c\n\x05\x06\0\x02\x02\x01\
    \x12\x03(\x08\x0c\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03(\r\x18\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03(#(\n\x0b\n\x04\x06\0\x02\x03\x12\x03)\x04\
    0\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03)\x08\x0e\n\x0c\n\x05\x06\0\x02\
    \x03\x02\x12\x03)\x0f\x1c\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03)',b\x06p\
    roto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
